%%% -------------------------------------------------------------------
%%% Author  : uabjle
%%% Description :  1
%%% 
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(prototype_test).   
   
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------

%% External exports
-export([start/0]). 


%% ====================================================================
%% External functions
%% ====================================================================


%% --------------------------------------------------------------------
%% Function:tes cases
%% Description: List of test cases 
%% Returns: non
%% --------------------------------------------------------------------
start()->
  %  io:format("~p~n",[{"Start setup",?MODULE,?FUNCTION_NAME,?LINE}]),
    ok=setup(),
    io:format("~p~n",[{"Stop setup",?MODULE,?FUNCTION_NAME,?LINE}]),

%    io:format("~p~n",[{"Start cluster_start()()",?MODULE,?FUNCTION_NAME,?LINE}]),
%    ok=cluster_start(),
%    io:format("~p~n",[{"Stop cluster_start()",?MODULE,?FUNCTION_NAME,?LINE}]),


    io:format("~p~n",[{"Start app_simulation()",?MODULE,?FUNCTION_NAME,?LINE}]),
    ok=app_simulation_1(),
    io:format("~p~n",[{"Stop app_simulation()",?MODULE,?FUNCTION_NAME,?LINE}]),
    

 %   io:format("~p~n",[{"Start load_texfile()",?MODULE,?FUNCTION_NAME,?LINE}]),
 %   ok=load_texfile(),
 %   io:format("~p~n",[{"Stop load_texfile()",?MODULE,?FUNCTION_NAME,?LINE}]),
    
  %  io:format("~p~n",[{"Start add_db_test1()",?MODULE,?FUNCTION_NAME,?LINE}]),
  %  ok= add_db_test1(),
  %  io:format("~p~n",[{"Stop  add_db_test1()",?MODULE,?FUNCTION_NAME,?LINE}]),

  %  io:format("~p~n",[{"Start stop_restart()",?MODULE,?FUNCTION_NAME,?LINE}]),
  %  ok= stop_restart(),
  %  io:format("~p~n",[{"Stop  stop_restart()",?MODULE,?FUNCTION_NAME,?LINE}]),

 %   
      %% End application tests
  %  io:format("~p~n",[{"Start cleanup",?MODULE,?FUNCTION_NAME,?LINE}]),
    ok=cleanup(),
  %  io:format("~p~n",[{"Stop cleaup",?MODULE,?FUNCTION_NAME,?LINE}]),
   
    io:format("------>"++atom_to_list(?MODULE)++" ENDED SUCCESSFUL ---------"),
    ok.
 %  io:format("application:which ~p~n",[{application:which_applications(),?FUNCTION_NAME,?MODULE,?LINE}]),

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------


%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
app_simulation_1()->
    [N0,N1,N2]=get_nodes(),  
    
    %% First Kubelete starts
    {ok,_}=sd:start(),
    ok=application:set_env([{dbase_infra,[{dbase_app,dbase_infra}]}]),
    ok=application:start(dbase_infra),
%    io:format("#0 mnesia:system_info() ~p~n",[{mnesia:system_info(),?FUNCTION_NAME,?MODULE,?LINE}]),
   
        
    %% Second Kubelet starts
    {ok,_}=rpc:call(N0,sd,start,[],5000),
    ok=rpc:call(N0,application,set_env,[[{dbase_infra,[{dbase_app,dbase_infra}]}]],5000),
    ok=rpc:call(N0,application,start,[dbase_infra],5000),  
 %   io:format("#1 mnesia:system_info() ~p~n",[{[rpc:call(N,mnesia,system_info,[],5000)|| N<-sd:get(mnesia)],?FUNCTION_NAME,?MODULE,?LINE}]),
   

    %% Application on first nod adds its tables 
    AppsTables=[fruit,host,vegetable],
    TableTextFiles=[{fruit,"test_src/fruit.con"},{host,"test_src/host.config"}],	       
    Tables1=[Table||Table<-rpc:call(node(),mnesia,system_info,[tables],5000),
		   lists:member(Table,AppsTables)],
    [{atomic,ok},
     {atomic,ok}]=[rpc:call(node(),mnesia,load_textfile,[TextFile],5000)||{Table,TextFile}<-TableTextFiles,
							    false=:=lists:member(Table,Tables1)],
    [{N,Table,rpc:call(N,dbase,dynamic_add_table,[Table,ram_copies],5000)}||N<-sd:get(dbase_infra),
										   Table<-AppsTables],
    
    io:format("#11 mnesia:system_info() ~p~n",[{rpc:call(node(),mnesia,system_info,[],5000),?FUNCTION_NAME,?MODULE,?LINE}]),
    %% Second nodes App add is tables 
    Tables2=[Table||Table<-rpc:call(N0,mnesia,system_info,[tables],5000),
		    lists:member(Table,AppsTables)],
    []=[rpc:call(N0,mnesia,load_textfile,[TextFile],5000)||{Table,TextFile}<-TableTextFiles,
							   false=:=lists:member(Table,Tables2)] , 
    [{N,Table,rpc:call(N,dbase,dynamic_add_table,[Table,ram_copies],5000)}||N<-sd:get(dbase_infra),
										Table<-AppsTables],
    
    %% Add third node
    {ok,_}=rpc:call(N1,sd,start,[],5000),
    ok=rpc:call(N1,application,set_env,[[{dbase_infra,[{dbase_app,dbase_infra}]}]],5000),
    ok=rpc:call(N1,application,start,[dbase_infra],5000),  
    %% App add is tables 
    Tables3=[Table||Table<-rpc:call(N1,mnesia,system_info,[tables],5000),
		    lists:member(Table,AppsTables)],
    []=[rpc:call(N1,mnesia,load_textfile,[TextFile],5000)||{Table,TextFile}<-TableTextFiles,
							   false=:=lists:member(Table,Tables3)] , 
    [{N,Table,rpc:call(N,dbase,dynamic_add_table,[Table,ram_copies],5000)}||N<-sd:get(dbase_infra),
										Table<-AppsTables],

    %% Add fourth node'
    {ok,_}=rpc:call(N2,sd,start,[],5000),
    ok=rpc:call(N2,application,set_env,[[{dbase_infra,[{dbase_app,dbase_infra}]}]],5000),
    ok=rpc:call(N2,application,start,[dbase_infra],5000),  
    %% App add is tables 
    Tables4=[Table||Table<-rpc:call(N2,mnesia,system_info,[tables],5000),
		    lists:member(Table,AppsTables)],
    []=[rpc:call(N2,mnesia,load_textfile,[TextFile],5000)||{Table,TextFile}<-TableTextFiles,
							   false=:=lists:member(Table,Tables4)] , 
    [{N,Table,rpc:call(N,dbase,dynamic_add_table,[Table,ram_copies],5000)}||N<-sd:get(dbase_infra),
										Table<-AppsTables],
 %  io:format("#2 mnesia:system_info() ~p~n",[{[rpc:call(N,mnesia,system_info,[],5000)|| N<-sd:get(mnesia)],?FUNCTION_NAME,?MODULE,?LINE}]),
    io:format("#21 mnesia:system_info() ~p~n",[{rpc:call(N2,mnesia,system_info,[],5000),?FUNCTION_NAME,?MODULE,?LINE}]),

    %% Kill N1
    slave:stop(N1),
  %  io:format("#3 mnesia:system_info() ~p~n",[{[rpc:call(N,mnesia,system_info,[],5000)|| N<-sd:get(mnesia)],?FUNCTION_NAME,?MODULE,?LINE}]),
    io:format("#31 mnesia:system_info() ~p~n",[{rpc:call(node(),mnesia,system_info,[],5000),?FUNCTION_NAME,?MODULE,?LINE}]),
    %% Restart N1
    {ok,N1}=start_slave("host1"),
    {ok,_}=rpc:call(N1,sd,start,[],5000),
    ok=rpc:call(N1,application,set_env,[[{dbase_infra,[{dbase_app,dbase_infra}]}]],5000),
    ok=rpc:call(N1,application,start,[dbase_infra],5000),  
    %% App add is tables 
    Tables31=[Table||Table<-rpc:call(N1,mnesia,system_info,[tables],5000),
		    lists:member(Table,AppsTables)],
    []=[rpc:call(N1,mnesia,load_textfile,[TextFile],5000)||{Table,TextFile}<-TableTextFiles,
							   false=:=lists:member(Table,Tables31)],
    [{N,Table,rpc:call(N,dbase,dynamic_add_table,[Table,ram_copies],5000)}||N<-sd:get(dbase_infra),
										Table<-AppsTables], 
						%  io:format("#4 mnesia:system_info() ~p~n",[{[rpc:call(N,mnesia,system_info,[],5000)|| N<-sd:get(mnesia)],?FUNCTION_NAME,?MODULE,?LINE}]),
    io:format("#41 mnesia:system_info() ~p~n",[{rpc:call(N1,mnesia,system_info,[],5000),?FUNCTION_NAME,?MODULE,?LINE}]),
    init:stop(),
    timer:sleep(2000),



    [N0,N1,N2]=get_nodes(),
    [{ok,_},{ok,_},{ok,_},{ok,_}]=[rpc:call(N,sd,start,[],5000)||N<-[node()|get_nodes()]],    
  
    
    
    [ok,ok,ok,ok]=[rpc:call(N,application,start,[dbase_infra],5000)||N<-[node()|get_nodes()]],
    []=lists:delete(node(),lists:sort(sd:get(mnesia))),  
    [host0@c100,host1@c100,host2@c100,test@c100]=lists:sort(rpc:call(N0,sd,get,[dbase_infra],5000)),
    

    %% Pre requisites set
  
    %% Detect and start first dbase node
    %%
    %% 1. Detect if the new node is the first node
    Node=node(),
    [{atomic,ok},
     {atomic,ok}]=case sd:get(mnesia) of
		      []->
			  %% Create missing tables     
			  AppsTables=[fruit,host],
			  TableTextFiles=[{fruit,"test_src/fruit.con"},{host,"test_src/host.config"}],	       
			  Tables=[Table||Table<-mnesia:system_info(tables),
					 lists:member(Table,AppsTables)],
			  [mnesia:load_textfile(TextFile)||{Table,TextFile}<-TableTextFiles,
							   false=:=lists:member(Table,Tables)];
		      [Node]->
			  case dbase:dynamic_db_init([]) of
			      {error,Reason}->
				  {error,Reason};
			      ok->
				  %% Create missing tables     
				  AppsTables=[fruit,host],
				  TableTextFiles=[{fruit,"test_src/fruit.con"},{host,"test_src/host.config"}],	       
				  Tables=[Table||Table<-mnesia:system_info(tables),
						 lists:member(Table,AppsTables)],
				  [mnesia:load_textfile(TextFile)||{Table,TextFile}<-TableTextFiles,
								   false=:=lists:member(Table,Tables)]
			  end;
		      MnesiaNodes->
			  {error,[shouldnt_be_started,MnesiaNodes]}
		  end,

    
    [{"c200","host"},
     {"c201","host"},
     {"c202","host"},
     {"c203","host"}]=lists:sort(mnesia:dirty_all_keys(host)),
    [apple,orange]=lists:sort(mnesia:dirty_all_keys(fruit)),
    
    %% 

    ok.

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
load_texfile()->
   
    io:format("mnesia:sys info) ~p~n",[{mnesia:system_info(),?FUNCTION_NAME,?MODULE,?LINE}]),
    %% load from file 
    {atomic,ok}=mnesia:load_textfile("test_src/host.config"),
    [{"c200","host"},
     {"c201","host"},
     {"c202","host"},
     {"c203","host"}]=lists:sort(mnesia:dirty_all_keys(host)),
    {atomic,ok}=mnesia:load_textfile("test_src/fruit.con"),
    [apple,orange]=lists:sort(mnesia:dirty_all_keys(fruit)),
    

    io:format("mnesia:dirty_read ~p~n",[{mnesia:dirty_read(host,{"c200","host"}),?FUNCTION_NAME,?MODULE,?LINE}]),
    io:format("mnesia:dirty_read ~p~n",[{mnesia:dirty_read(fruit,apple),?FUNCTION_NAME,?MODULE,?LINE}]),
    
   ok.

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
get_nodes()->
    HostId=net_adm:localhost(),
    A="host0@"++HostId,
    Node0=list_to_atom(A),
    B="host1@"++HostId,
    Node1=list_to_atom(B),
    C="host2@"++HostId,
    Node2=list_to_atom(C),    
    [Node0,Node1,Node2].
    
start_slave(NodeName)->
    HostId=net_adm:localhost(),
    Node=list_to_atom(NodeName++"@"++HostId),
    rpc:call(Node,init,stop,[]),
    Cookie=atom_to_list(erlang:get_cookie()),
    Args="-pa ebin -pa test_ebin -setcookie "++Cookie,
    {ok,SNode}=slave:start(HostId,NodeName,Args),
    [net_adm:ping(N)||N<-nodes()],
    {ok,SNode}.

setup()->
    HostId=net_adm:localhost(),
    A="host0@"++HostId,
    Node0=list_to_atom(A),
    B="host1@"++HostId,
    Node1=list_to_atom(B),
    C="host2@"++HostId,
    Node2=list_to_atom(C),    
    Nodes=[Node0,Node1,Node2],
    [rpc:call(N,init,stop,[],5*1000)||N<-Nodes],
    timer:sleep(2000),
    [{ok,Node0},
     {ok,Node1},
     {ok,Node2}]=[start_slave(NodeName)||NodeName<-["host0","host1","host2"]],
    [net_adm:ping(N)||N<-Nodes],
    application:stop(mnesia),
    application:unload(mnesia),

    mnesia:stop(),
    mnesia:del_table_copy(schema,node()),
    mnesia:delete_schema([node()]),
    timer:sleep(1000),
   
    
    ok.

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------    

cleanup()->
    mnesia:stop(),
    mnesia:del_table_copy(schema,node()),
    mnesia:delete_schema([node()]),
    timer:sleep(1000),
    [slave:stop(Node)||Node<-get_nodes()],
    ok.
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
